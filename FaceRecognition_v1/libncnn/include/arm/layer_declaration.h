// Layer Declaration header
//
// This file is auto-generated by cmake, don't edit it.

#include "layer/absval.h"
#include "layer/arm/absval_arm.h"
namespace ncnn {
class AbsVal_final : virtual public AbsVal, virtual public AbsVal_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = AbsVal::create_pipeline(opt); if (ret) return ret; }
        { int ret = AbsVal_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = AbsVal_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = AbsVal::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(AbsVal_final)
} // namespace ncnn

#include "layer/batchnorm.h"
#include "layer/arm/batchnorm_arm.h"
namespace ncnn {
class BatchNorm_final : virtual public BatchNorm, virtual public BatchNorm_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BatchNorm::create_pipeline(opt); if (ret) return ret; }
        { int ret = BatchNorm_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BatchNorm_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BatchNorm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BatchNorm_final)
} // namespace ncnn

#include "layer/bias.h"
#include "layer/arm/bias_arm.h"
namespace ncnn {
class Bias_final : virtual public Bias, virtual public Bias_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Bias::create_pipeline(opt); if (ret) return ret; }
        { int ret = Bias_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Bias_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Bias::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Bias_final)
} // namespace ncnn

#include "layer/bnll.h"
namespace ncnn {
class BNLL_final : virtual public BNLL
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BNLL::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BNLL::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BNLL_final)
} // namespace ncnn

#include "layer/concat.h"
#include "layer/arm/concat_arm.h"
namespace ncnn {
class Concat_final : virtual public Concat, virtual public Concat_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Concat::create_pipeline(opt); if (ret) return ret; }
        { int ret = Concat_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Concat_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Concat::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Concat_final)
} // namespace ncnn

#include "layer/convolution.h"
#include "layer/arm/convolution_arm.h"
namespace ncnn {
class Convolution_final : virtual public Convolution, virtual public Convolution_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution::create_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Convolution_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution_final)
} // namespace ncnn

#include "layer/crop.h"
#include "layer/arm/crop_arm.h"
namespace ncnn {
class Crop_final : virtual public Crop, virtual public Crop_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Crop::create_pipeline(opt); if (ret) return ret; }
        { int ret = Crop_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Crop_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Crop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Crop_final)
} // namespace ncnn

#include "layer/deconvolution.h"
#include "layer/arm/deconvolution_arm.h"
namespace ncnn {
class Deconvolution_final : virtual public Deconvolution, virtual public Deconvolution_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Deconvolution::create_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Deconvolution_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Deconvolution_final)
} // namespace ncnn

#include "layer/dropout.h"
#include "layer/arm/dropout_arm.h"
namespace ncnn {
class Dropout_final : virtual public Dropout, virtual public Dropout_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dropout::create_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dropout_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dropout_final)
} // namespace ncnn

#include "layer/eltwise.h"
#include "layer/arm/eltwise_arm.h"
namespace ncnn {
class Eltwise_final : virtual public Eltwise, virtual public Eltwise_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Eltwise::create_pipeline(opt); if (ret) return ret; }
        { int ret = Eltwise_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Eltwise_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Eltwise::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Eltwise_final)
} // namespace ncnn

#include "layer/elu.h"
namespace ncnn {
class ELU_final : virtual public ELU
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ELU::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ELU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ELU_final)
} // namespace ncnn

#include "layer/embed.h"
namespace ncnn {
class Embed_final : virtual public Embed
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Embed::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Embed::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Embed_final)
} // namespace ncnn

#include "layer/exp.h"
namespace ncnn {
class Exp_final : virtual public Exp
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Exp::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Exp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Exp_final)
} // namespace ncnn

#include "layer/flatten.h"
#include "layer/arm/flatten_arm.h"
namespace ncnn {
class Flatten_final : virtual public Flatten, virtual public Flatten_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Flatten::create_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Flatten_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Flatten_final)
} // namespace ncnn

#include "layer/innerproduct.h"
#include "layer/arm/innerproduct_arm.h"
namespace ncnn {
class InnerProduct_final : virtual public InnerProduct, virtual public InnerProduct_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InnerProduct::create_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InnerProduct_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InnerProduct_final)
} // namespace ncnn

#include "layer/input.h"
namespace ncnn {
class Input_final : virtual public Input
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Input::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Input::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Input_final)
} // namespace ncnn

#include "layer/log.h"
namespace ncnn {
class Log_final : virtual public Log
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Log::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Log::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Log_final)
} // namespace ncnn

#include "layer/lrn.h"
#include "layer/arm/lrn_arm.h"
namespace ncnn {
class LRN_final : virtual public LRN, virtual public LRN_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = LRN::create_pipeline(opt); if (ret) return ret; }
        { int ret = LRN_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = LRN_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = LRN::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(LRN_final)
} // namespace ncnn

#include "layer/memorydata.h"
namespace ncnn {
class MemoryData_final : virtual public MemoryData
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = MemoryData::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = MemoryData::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(MemoryData_final)
} // namespace ncnn

#include "layer/mvn.h"
namespace ncnn {
class MVN_final : virtual public MVN
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = MVN::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = MVN::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(MVN_final)
} // namespace ncnn

#include "layer/pooling.h"
#include "layer/arm/pooling_arm.h"
namespace ncnn {
class Pooling_final : virtual public Pooling, virtual public Pooling_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Pooling::create_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Pooling_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Pooling_final)
} // namespace ncnn

#include "layer/power.h"
namespace ncnn {
class Power_final : virtual public Power
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Power::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Power::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Power_final)
} // namespace ncnn

#include "layer/prelu.h"
#include "layer/arm/prelu_arm.h"
namespace ncnn {
class PReLU_final : virtual public PReLU, virtual public PReLU_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = PReLU::create_pipeline(opt); if (ret) return ret; }
        { int ret = PReLU_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = PReLU_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = PReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(PReLU_final)
} // namespace ncnn

#include "layer/proposal.h"
namespace ncnn {
class Proposal_final : virtual public Proposal
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Proposal::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Proposal::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Proposal_final)
} // namespace ncnn

#include "layer/reduction.h"
namespace ncnn {
class Reduction_final : virtual public Reduction
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reduction::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reduction::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reduction_final)
} // namespace ncnn

#include "layer/relu.h"
#include "layer/arm/relu_arm.h"
namespace ncnn {
class ReLU_final : virtual public ReLU, virtual public ReLU_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ReLU::create_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ReLU_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ReLU_final)
} // namespace ncnn

#include "layer/reshape.h"
#include "layer/arm/reshape_arm.h"
namespace ncnn {
class Reshape_final : virtual public Reshape, virtual public Reshape_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reshape::create_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reshape_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reshape_final)
} // namespace ncnn

#include "layer/roipooling.h"
namespace ncnn {
class ROIPooling_final : virtual public ROIPooling
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ROIPooling::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ROIPooling::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ROIPooling_final)
} // namespace ncnn

#include "layer/scale.h"
#include "layer/arm/scale_arm.h"
namespace ncnn {
class Scale_final : virtual public Scale, virtual public Scale_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Scale::create_pipeline(opt); if (ret) return ret; }
        { int ret = Scale_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Scale_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Scale::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Scale_final)
} // namespace ncnn

#include "layer/sigmoid.h"
#include "layer/arm/sigmoid_arm.h"
namespace ncnn {
class Sigmoid_final : virtual public Sigmoid, virtual public Sigmoid_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Sigmoid::create_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Sigmoid_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Sigmoid_final)
} // namespace ncnn

#include "layer/slice.h"
#include "layer/arm/slice_arm.h"
namespace ncnn {
class Slice_final : virtual public Slice, virtual public Slice_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Slice::create_pipeline(opt); if (ret) return ret; }
        { int ret = Slice_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Slice_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Slice::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Slice_final)
} // namespace ncnn

#include "layer/softmax.h"
#include "layer/arm/softmax_arm.h"
namespace ncnn {
class Softmax_final : virtual public Softmax, virtual public Softmax_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Softmax::create_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Softmax_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Softmax_final)
} // namespace ncnn

#include "layer/split.h"
namespace ncnn {
class Split_final : virtual public Split
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Split::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Split::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Split_final)
} // namespace ncnn

#include "layer/tanh.h"
#include "layer/arm/tanh_arm.h"
namespace ncnn {
class TanH_final : virtual public TanH, virtual public TanH_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = TanH::create_pipeline(opt); if (ret) return ret; }
        { int ret = TanH_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = TanH_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = TanH::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(TanH_final)
} // namespace ncnn

#include "layer/threshold.h"
namespace ncnn {
class Threshold_final : virtual public Threshold
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Threshold::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Threshold::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Threshold_final)
} // namespace ncnn

#include "layer/binaryop.h"
#include "layer/arm/binaryop_arm.h"
namespace ncnn {
class BinaryOp_final : virtual public BinaryOp, virtual public BinaryOp_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BinaryOp::create_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BinaryOp_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BinaryOp_final)
} // namespace ncnn

#include "layer/unaryop.h"
#include "layer/arm/unaryop_arm.h"
namespace ncnn {
class UnaryOp_final : virtual public UnaryOp, virtual public UnaryOp_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = UnaryOp::create_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = UnaryOp_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(UnaryOp_final)
} // namespace ncnn

#include "layer/convolutiondepthwise.h"
#include "layer/arm/convolutiondepthwise_arm.h"
namespace ncnn {
class ConvolutionDepthWise_final : virtual public ConvolutionDepthWise, virtual public ConvolutionDepthWise_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ConvolutionDepthWise::create_pipeline(opt); if (ret) return ret; }
        { int ret = ConvolutionDepthWise_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ConvolutionDepthWise_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ConvolutionDepthWise::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ConvolutionDepthWise_final)
} // namespace ncnn

#include "layer/padding.h"
#include "layer/arm/padding_arm.h"
namespace ncnn {
class Padding_final : virtual public Padding, virtual public Padding_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Padding::create_pipeline(opt); if (ret) return ret; }
        { int ret = Padding_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Padding_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Padding::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Padding_final)
} // namespace ncnn

#include "layer/squeeze.h"
namespace ncnn {
class Squeeze_final : virtual public Squeeze
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Squeeze::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Squeeze::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Squeeze_final)
} // namespace ncnn

#include "layer/expanddims.h"
namespace ncnn {
class ExpandDims_final : virtual public ExpandDims
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ExpandDims::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ExpandDims::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ExpandDims_final)
} // namespace ncnn

#include "layer/normalize.h"
namespace ncnn {
class Normalize_final : virtual public Normalize
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Normalize::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Normalize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Normalize_final)
} // namespace ncnn

#include "layer/permute.h"
namespace ncnn {
class Permute_final : virtual public Permute
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Permute::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Permute::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Permute_final)
} // namespace ncnn

#include "layer/priorbox.h"
namespace ncnn {
class PriorBox_final : virtual public PriorBox
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = PriorBox::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = PriorBox::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(PriorBox_final)
} // namespace ncnn

#include "layer/detectionoutput.h"
namespace ncnn {
class DetectionOutput_final : virtual public DetectionOutput
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = DetectionOutput::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = DetectionOutput::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(DetectionOutput_final)
} // namespace ncnn

#include "layer/interp.h"
#include "layer/arm/interp_arm.h"
namespace ncnn {
class Interp_final : virtual public Interp, virtual public Interp_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Interp::create_pipeline(opt); if (ret) return ret; }
        { int ret = Interp_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Interp_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Interp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Interp_final)
} // namespace ncnn

#include "layer/deconvolutiondepthwise.h"
#include "layer/arm/deconvolutiondepthwise_arm.h"
namespace ncnn {
class DeconvolutionDepthWise_final : virtual public DeconvolutionDepthWise, virtual public DeconvolutionDepthWise_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = DeconvolutionDepthWise::create_pipeline(opt); if (ret) return ret; }
        { int ret = DeconvolutionDepthWise_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = DeconvolutionDepthWise_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = DeconvolutionDepthWise::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(DeconvolutionDepthWise_final)
} // namespace ncnn

#include "layer/shufflechannel.h"
#include "layer/arm/shufflechannel_arm.h"
namespace ncnn {
class ShuffleChannel_final : virtual public ShuffleChannel, virtual public ShuffleChannel_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ShuffleChannel::create_pipeline(opt); if (ret) return ret; }
        { int ret = ShuffleChannel_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ShuffleChannel_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ShuffleChannel::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ShuffleChannel_final)
} // namespace ncnn

#include "layer/instancenorm.h"
namespace ncnn {
class InstanceNorm_final : virtual public InstanceNorm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InstanceNorm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InstanceNorm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InstanceNorm_final)
} // namespace ncnn

#include "layer/clip.h"
#include "layer/arm/clip_arm.h"
namespace ncnn {
class Clip_final : virtual public Clip, virtual public Clip_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Clip::create_pipeline(opt); if (ret) return ret; }
        { int ret = Clip_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Clip_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Clip::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Clip_final)
} // namespace ncnn

#include "layer/reorg.h"
namespace ncnn {
class Reorg_final : virtual public Reorg
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reorg::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reorg::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reorg_final)
} // namespace ncnn

#include "layer/yolodetectionoutput.h"
namespace ncnn {
class YoloDetectionOutput_final : virtual public YoloDetectionOutput
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = YoloDetectionOutput::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = YoloDetectionOutput::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(YoloDetectionOutput_final)
} // namespace ncnn

#include "layer/quantize.h"
#include "layer/arm/quantize_arm.h"
namespace ncnn {
class Quantize_final : virtual public Quantize, virtual public Quantize_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Quantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Quantize_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Quantize_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Quantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Quantize_final)
} // namespace ncnn

#include "layer/dequantize.h"
#include "layer/arm/dequantize_arm.h"
namespace ncnn {
class Dequantize_final : virtual public Dequantize, virtual public Dequantize_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dequantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Dequantize_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dequantize_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dequantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dequantize_final)
} // namespace ncnn

#include "layer/yolov3detectionoutput.h"
namespace ncnn {
class Yolov3DetectionOutput_final : virtual public Yolov3DetectionOutput
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Yolov3DetectionOutput::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Yolov3DetectionOutput::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Yolov3DetectionOutput_final)
} // namespace ncnn

#include "layer/psroipooling.h"
namespace ncnn {
class PSROIPooling_final : virtual public PSROIPooling
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = PSROIPooling::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = PSROIPooling::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(PSROIPooling_final)
} // namespace ncnn

#include "layer/packing.h"
#include "layer/arm/packing_arm.h"
namespace ncnn {
class Packing_final : virtual public Packing, virtual public Packing_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Packing::create_pipeline(opt); if (ret) return ret; }
        { int ret = Packing_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Packing_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Packing::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Packing_final)
} // namespace ncnn

#include "layer/requantize.h"
#include "layer/arm/requantize_arm.h"
namespace ncnn {
class Requantize_final : virtual public Requantize, virtual public Requantize_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Requantize::create_pipeline(opt); if (ret) return ret; }
        { int ret = Requantize_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Requantize_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Requantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Requantize_final)
} // namespace ncnn

#include "layer/cast.h"
#include "layer/arm/cast_arm.h"
namespace ncnn {
class Cast_final : virtual public Cast, virtual public Cast_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Cast::create_pipeline(opt); if (ret) return ret; }
        { int ret = Cast_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Cast_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Cast::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Cast_final)
} // namespace ncnn

#include "layer/hardsigmoid.h"
#include "layer/arm/hardsigmoid_arm.h"
namespace ncnn {
class HardSigmoid_final : virtual public HardSigmoid, virtual public HardSigmoid_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = HardSigmoid::create_pipeline(opt); if (ret) return ret; }
        { int ret = HardSigmoid_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = HardSigmoid_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = HardSigmoid::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(HardSigmoid_final)
} // namespace ncnn

#include "layer/selu.h"
#include "layer/arm/selu_arm.h"
namespace ncnn {
class SELU_final : virtual public SELU, virtual public SELU_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = SELU::create_pipeline(opt); if (ret) return ret; }
        { int ret = SELU_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = SELU_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = SELU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(SELU_final)
} // namespace ncnn

#include "layer/hardswish.h"
#include "layer/arm/hardswish_arm.h"
namespace ncnn {
class HardSwish_final : virtual public HardSwish, virtual public HardSwish_arm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = HardSwish::create_pipeline(opt); if (ret) return ret; }
        { int ret = HardSwish_arm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = HardSwish_arm::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = HardSwish::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(HardSwish_final)
} // namespace ncnn

#include "layer/noop.h"
namespace ncnn {
class Noop_final : virtual public Noop
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Noop::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Noop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Noop_final)
} // namespace ncnn


